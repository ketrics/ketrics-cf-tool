AWSTemplateFormatVersion: '2010-09-09'
Description: The AWS CloudFormation template for this Serverless application

Resources:
  CognitoUsersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${cognitoUsersBucketName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${stackName}-UserPool
      LambdaConfig:
        ${lambdaConfigPostConfirmation}
        ${lambdaConfigPreTokenGeneration}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: ${passwordPolicy.minimumLength}
          RequireLowercase: ${passwordPolicy.requireLowercase}
          RequireNumbers: ${passwordPolicy.requireNumbers}
          RequireSymbols: ${passwordPolicy.requireSymbols}
          RequireUppercase: ${passwordPolicy.requireUppercase}
    UpdateReplacePolicy: Retain

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${stackName}-UserPoolClient
      RefreshTokenValidity: 30
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ${stackName}-IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt [CognitoUserPool, ProviderName]

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt [AuthRole, Arn]
        unauthenticated: !GetAtt [UnauthRole, Arn]

  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${stackName}-AppAuthRole
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
          Condition:
            "StringEquals":
              "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
            "ForAnyValue:StringLike":
              "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
      - PolicyName: ${stackName}-AppAuthPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - mobileanalytics:PutEvents
              - cognito-sync:*
              - cognito-identity:*
            Resource: "*"
          - Effect: Allow
            Action:
              - execute-api:Invoke
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:*
            Resource: arn:aws:s3:${AWS::Region}:${AWS::AccountId}:${cognitoUsersBucketName}/private/${cognito-identity.amazonaws.com:sub}/*
  
  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${stackName}-AppUnauthRole
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
          Condition:
            "StringEquals":
              "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
            "ForAnyValue:StringLike":
              "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
      - PolicyName: ${stackName}-AppUnauthPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - mobileanalytics:PutEvents
              - cognito-sync:*
              - cognito-identity:*
            Resource: "*"

Outputs:  
  UserPoolId:
    Value: !Ref CognitoUserPool

  UserPoolArn:
    Value: !GetAtt [CognitoUserPool, Arn]

  UserPoolClientId:
    Value: !Ref UserPoolClient

  IdentityPoolId:
    Value: !Ref IdentityPool
