AWSTemplateFormatVersion: '2010-09-09'
Description: The AWS CloudFormation template for this Serverless application

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/${stackName}-${functionName}"
      RetentionInDays: 7

  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: "${stackName}-${functionName}-LambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "${stackName}-${functionName}-LambdaPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${stackName}-${functionName}*:*
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${stackName}-${functionName}*:*:*
      
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: ${projectDeploymentBucketName}
        S3Key: ${deploymentBucketKey}
      FunctionName: "${functionName}"
      Handler: handler.${functionName}
      MemorySize: ${memorySize}
      Role: !GetAtt [IamRoleLambdaExecution, Arn]
      Runtime: ${runtime}
      Timeout: ${timeout}
      Environment:
        Variables:
          STAGE: dev
    DependsOn:
      - LogGroup
      - IamRoleLambdaExecution
